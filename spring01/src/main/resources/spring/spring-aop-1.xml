<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	
	<!-- 声明一个业务类 -->
	<bean id="customerService" class="com.bo.demo.service.impl.CustomerServiceImpl" />
	
	<!-- 声明通知类 -->
	<bean id="demoBeforeAdvice" class="com.bo.demo.advice.DemoBeforeAdvice" />
	<bean id="demoAfterReturnAdvice" class="com.bo.demo.advice.DemoAfterReturnAdvice" />
	<bean id="demoAroundAdvice" class="com.bo.demo.advice.DemoAroundAdvice" />
	<bean id="demoAfterThrowsAdvice" class="com.bo.demo.advice.DemoAfterThrowsAdvice" />
	
	<!-- 声明AOP代理基类,使用  ProxyFactoryBean 产生代理对象-->
	<bean id="baseProxy" class="org.springframework.aop.framework.ProxyFactoryBean" lazy-init="true" abstract="true">
		 <!-- 代理对象所使用的advice，即4种通知--> 
		<property name="interceptorNames">
			<list>
				<!-- 经过测试，知道spring处理顺序是按照xml配置顺序依次处理通知，以队列的方式存放前通知，以压栈的方式存放后通知。
				所以是前通知依次执行，后通知直到切入点执行完之后，从栈里在后进先出的形式把后通知执行。 环绕通知相当于一个前通知和一个后通知-->
				
				<value>demoAroundAdvice</value>
				<value>demoBeforeAdvice</value>
				<value>demoAfterReturnAdvice</value>
				<value>demoAfterThrowsAdvice</value>
			</list>
		</property>
	</bean>
	
	<!-- 具体的AOP业务代理bean -->
	<bean id="customerServiceProxy" parent="baseProxy">
		<!-- 代理对象所实现的接口 ，如果有接口可以这样设置 --> 
		<property name="interfaces">
			<list>
				<value>com.bo.demo.service.CustomerService</value>
			</list>
		</property>
		<!-- 设置目标对象 --> 
		<property name="target" ref="customerService"/>
	</bean>

</beans>